# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import nsfw_pb2 as nsfw__pb2


class NsfwDetectionProtoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectFromVideo = channel.unary_unary(
                '/nsfw_detection_pb.NsfwDetectionProtoService/DetectFromVideo',
                request_serializer=nsfw__pb2.DetectFromVideoRequest.SerializeToString,
                response_deserializer=nsfw__pb2.VideoDetectionResponse.FromString,
                )
        self.DetectFromImage = channel.unary_unary(
                '/nsfw_detection_pb.NsfwDetectionProtoService/DetectFromImage',
                request_serializer=nsfw__pb2.DetectFromImageRequest.SerializeToString,
                response_deserializer=nsfw__pb2.ImageDetectionResponse.FromString,
                )


class NsfwDetectionProtoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectFromVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectFromImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NsfwDetectionProtoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectFromVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFromVideo,
                    request_deserializer=nsfw__pb2.DetectFromVideoRequest.FromString,
                    response_serializer=nsfw__pb2.VideoDetectionResponse.SerializeToString,
            ),
            'DetectFromImage': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectFromImage,
                    request_deserializer=nsfw__pb2.DetectFromImageRequest.FromString,
                    response_serializer=nsfw__pb2.ImageDetectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nsfw_detection_pb.NsfwDetectionProtoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NsfwDetectionProtoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectFromVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nsfw_detection_pb.NsfwDetectionProtoService/DetectFromVideo',
            nsfw__pb2.DetectFromVideoRequest.SerializeToString,
            nsfw__pb2.VideoDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectFromImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nsfw_detection_pb.NsfwDetectionProtoService/DetectFromImage',
            nsfw__pb2.DetectFromImageRequest.SerializeToString,
            nsfw__pb2.ImageDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
